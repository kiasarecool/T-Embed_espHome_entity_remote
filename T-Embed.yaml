substitutions:
    ###replace with your info, and it should work!
    ## please explore the code and customize the display @ the bottom!!!  
      esp_name: "T-Embed"
      encryption_key: "zu9Vpr8R7IXEg5phtSxsSmwf7djcLxPp1suwYhODBfM="
      ota_pass: "3c1efc6f875af16b4560b6c777098501"
      ap_pass: ""
      media_title_entity: "media_player.kodi_appletv"
      media_volume_entity: "media_player.bedroom_smart_tv"
      climate_entity: "climate.thermostat_2"
      temp_sensor_1: "sensor.dht_2_temp"
      temp_sensor_2: "sensor.bedroom_temperature"
      temp_sensor_3: "sensor.bme680_box_temperature"
    
      humid_sensor_1: "sensor.bme680_box_humidity"
    
      iaq_sensor_1: "sensor.bme680_box_iaq"
      average: "sensor.average_indoor_temperature"
      light1: "light.bedroom_lights"
      light2: "light.kitchen_lights"
      light3: "light.flood_group"
      hide_encoder_from_HA: "true"
    esphome:
      name: t-embed
      friendly_name: t-embed
      platformio_options:
        board_build.mcu: esp32s3
        board_build.name: "LilyGO T-Embed ESP32-S3"
        board_build.upload.flash_size: "16MB"
        board_build.upload.maximum_size: 16777216
        board_build.vendor: "LilyGO"
     
      on_boot:
        priority: 800
        then:
          - lambda: |-
              id(display1).enable();
              id(display1).transfer_byte(0x11);
              id(display1).disable();
          - delay: 5s
          - switch.turn_on: power_on
          - switch.turn_on: backlight
    
    esp32:
      board: esp32-s3-devkitc-1
      framework:
        type: arduino
    # Enable logging
    logger:
    # Enable Home Assistant API
    api:
      encryption:
        key: "${encryption_key}"
    ota:
      password: "${ota_pass}"
    wifi:
      ssid: !secret wifi_ssid
      password: !secret wifi_password
    
      # Enable fallback hotspot (captive portal) in case wifi connection fails
      ap:
        ssid: "Oh no- ur T-Embed lost its wi-fi"
        password: "${ap_pass}"
    captive_portal:
    globals: 
      - id: wifi_connection
        type: bool
        restore_value: no
        initial_value: "false"
    #######################################
    interval: 
      - interval: 60s
        then:
          - if:
              condition:
                wifi.connected:
              then:
                - lambda: |-
                    id(wifi_connection) = true;
              else:
                - lambda: |-
                    id(wifi_connection) = false;
    ###########################################
    script:
      - id: set_delay
        mode: restart
        then:
          - delay: 1500ms
          - script.execute: set_thing
    
                
      - id: set_thing
        mode: queued
        then:
          - if:
                condition:
                  display.is_displaying_page:
                    id: display1
                    page_id: page1
                then:
                    - homeassistant.service: 
                        service: input_number.set_value
                        data_template:
                          value: !lambda "return id(encoder).state / 2;"
                          entity_id: input_number.target 
          - if:
                condition:
                  display.is_displaying_page:
                    id: display1
                    page_id: page2
                then:
                    - homeassistant.service:
                        service: media_player.volume_set
                        data_template:                 
                          volume_level: !lambda "return id(encoder).state / 100;"
              #            area_id: bedroom
                          entity_id: ${media_volume_entity}
          - if:
                condition:
                  display.is_displaying_page:
                    id: display1
                    page_id: page3
                then:
                  - homeassistant.service: 
                      service: light.turn_on
                      data_template:
                        brightness: !lambda "return id(encoder).state / 200 * 255;"
                        entity_id: ${light1}
          - if:
                condition:
                  display.is_displaying_page:
                    id: display1
                    page_id: page4
                then:
                  - homeassistant.service: 
                      service: light.turn_on
                      data_template:
                        brightness: !lambda "return id(encoder).state / 200 * 255;"
                        entity_id: ${light2}
      - id: set_rot
        mode: restart
        then:
            - if:
                condition:
                  display.is_displaying_page:
                    id: display1
                    page_id: page1
                then:
                  - sensor.rotary_encoder.set_value:
                      id: encoder
                      value: !lambda "return id(target).state * 2;"
            - if:
                condition:
                  display.is_displaying_page:
                    id: display1
                    page_id: page2
                then:
                  - sensor.rotary_encoder.set_value:
                     id: encoder
                     value: !lambda "return id(media_entity_vol).state * 100;"
            - if:
                condition:
                  display.is_displaying_page:
                    id: display1
                    page_id: page3
                then:
                  - sensor.rotary_encoder.set_value:
                     id: encoder
                     value: !lambda "return id(light1_brt).state / 255 * 100;"
            - if:
                condition:
                  display.is_displaying_page:
                    id: display1
                    page_id: page4
                then:
                  - sensor.rotary_encoder.set_value:
                      id: encoder
                      value: !lambda "return id(light2_brt).state / 255 * 100;"
      - id: toggle
        mode: single
        then:
            - if:
                condition:
                  display.is_displaying_page:
                    id: display1
                    page_id: page2
                then:
                    - sensor.rotary_encoder.set_value:
                        id: encoder
                        value: "0"
                    - homeassistant.service:
                        service: media_player.set_volume
                        data_template:                 
                          volume: "0"
                          entity_id: ${media_volume_entity}
            - if:
                condition:
                  display.is_displaying_page:
                    id: display1
                    page_id: page3
                then:
                    - homeassistant.service: 
                        service: light.toggle
                        data_template:
                          transition: "5"
                          area_id: bedroom
     #                     entity_id: ${light1}
            - if:
                condition:
                  display.is_displaying_page:
                    id: display1
                    page_id: page4
                then:
                    - homeassistant.service: 
                        service: light.toggle
                        data_template:
                          area_id: kitchen
    #                      entity_id: ${light2}
      - id: things_on
        mode: single
        then:
            - if:
                condition:
                  display.is_displaying_page:
                    id: display1
                    page_id: page1
                then:
                     - homeassistant.service: 
                         service: climate.turn_on
                         data_template:
                           area_id: hallway    
            - if:
                condition:
                  display.is_displaying_page:
                    id: display1
                    page_id: page2
                then:
                    - homeassistant.service: 
                        service: media_player.turn_on
                        data_template:
                          entity_id: ${media_volume_entity}      
      - id: things_off
        mode: single
        then:
          - if:
                condition:
                  display.is_displaying_page:
                    id: display1
                    page_id: page1
                then:
                  - homeassistant.service: 
                      service: climate.turn_off
                      data_template:
                        entity_id: ${climate_entity}
          - if:
                condition:
                  display.is_displaying_page:
                    id: display1
                    page_id: page2
                then:
                    - homeassistant.service: 
                        service: media_player.turn_off
                        data_template:
                          entity_id: ${media_volume_entity}
    ####################################################
    binary_sensor:
      - platform: gpio
        name: '${esp_name} Button'
        id: button1
        pin: 0
        internal: true
        filters:
          - invert:
        on_multi_click:
        - timing: 
            - OFF for at least 1500ms 
            - ON for 1ms to 400ms              # Click
          then:
            - display.page.show_next: display1
            - script.execute: set_rot
        - timing:
            - OFF for at least 1500ms 
            - ON for 400ms to 3000ms            # Short Hold
          then:
            - display.page.show_next: display1
            - script.execute: things_on
        - timing:
            - OFF for at least 1500ms             # Dub Click -
            - ON for 1ms to 500ms
            - OFF for at least 1ms 
            - ON for 1ms to 500ms
          then:
            - script.execute: toggle
        - timing:
            - OFF for at least 1500ms             # Trip Click -
            - ON for 50ms to 500ms 
            - OFF for 50ms to 500ms
            - ON for 50ms to 500ms
            - OFF for 50ms to 500ms
            - ON for 50ms to 500ms 
          then:
            - script.execute: things_off              
        - timing:
            - OFF for at least 1500ms   
            - ON for at least 3100ms             # 3s + Hold
          then:
             - switch.toggle: backlight
             
    ##############################################################################
    sensor:
      - platform: rotary_encoder
        name: "${esp_name} Rotary Encoder"
        id: encoder
        pin_a: GPIO02
        pin_b: GPIO01
        resolution: 2
        restore_mode: RESTORE_DEFAULT_ZERO
        accuracy_decimals: 0
        publish_initial_value: true
        min_value: 0
        max_value: 300
        internal: ${hide_encoder_from_HA}
        on_value:
          - if:
              condition:
                display.is_displaying_page:
                  id: display1
                  page_id: page1
              then:                   
                - script.execute: set_delay
              else:     
                - script.execute: set_thing
    ###################################################################
      - platform: homeassistant
        id: media_entity_vol
        entity_id: ${media_volume_entity}
        attribute: volume_level
        internal: true
    ####################################################################
      - platform: homeassistant
        entity_id: ${light1}
        id: light1_brt
        attribute: brightness
      - platform: homeassistant
        entity_id: ${light1}
        id: light1
    #    attribute: color_temp
      - platform: homeassistant
        entity_id: ${light2}
        id: light2_brt
        attribute: brightness
      - platform: homeassistant
        entity_id: ${light2}
        id: light2
    #    attribute: color_temp
      - platform: homeassistant
        entity_id: input_number.target
        id: target      
      - platform: homeassistant
        entity_id: sensor.average_indoor_temperature
        id: avg_temp
      - platform: homeassistant
        entity_id: ${temp_sensor_2}
        id: temp2
      - platform: homeassistant
        entity_id: ${temp_sensor_1}
        id: temp1
      - platform: homeassistant
        id: thermo_temp
        entity_id: sensor.thermostat_current_temperature
      - platform: homeassistant
        id: temp3
        entity_id: ${temp_sensor_3}
      - platform: homeassistant
        id: humid1
        entity_id: ${humid_sensor_1}
      - platform: homeassistant
        id: iaq1
        entity_id: ${iaq_sensor_1}
      - platform: homeassistant
        id: thermostat_setpoint
        entity_id: ${climate_entity}
        attribute: temperature
    ##########################################################################
    text_sensor:
      - platform: homeassistant
        id: hvac_txt
        entity_id: ${climate_entity}
        attribute: hvac_action
      - platform: homeassistant
        id: hvac_fan
        entity_id: ${climate_entity}
        attribute: fan_mode
      - platform: homeassistant
        id: hvac_mode
        entity_id: ${climate_entity}
      - platform: homeassistant
        entity_id: ${media_title_entity}
        id: nowplay
        attribute: media_title
      - platform: homeassistant
        entity_id: ${light2}
        id: light2_txt
    #    attribute: 
    ##############################################################
    font:
      - file: 'fonts/arial.ttf'
        id: font1
        size: 18
      - file: "fonts/mdi.ttf"
        id: mdi3
        size: 33
        glyphs: [
          "\U000F1254", #light group on
          "\U000F12CE", #light group off
          "\U000F0A21", #windows 98 flag
          "\U000F05AA", #wifi off
          "\U000F05A9", #wifi
          "\U000F075D", #Volume +
          "\U000F075E", #Volume -
          "\U000F0E08", #mute
          ]
      - file: "fonts/mdi.ttf"
        id: mdi2
        size: 42
        glyphs: [
          "\U000F1254", #light group on
          "\U000F12CE", #light group off
          "\U000F075E", #Volume -
          "\U000F075D", #vol +
          "\U000F05AA", #wifi off
          "\U000F05A9", #wifi
          "\U000F0E08", #mute
          ]
      - file: 'fonts/arial.ttf'
        id: font0
        size: 20
      - file: 'fonts/arial.ttf'
        id: font00
        size: 15
      - file: 'BebasNeue-Regular.ttf'
        id: font2
        size: 40
      - file: 'BebasNeue-Regular.ttf'
        id: font4
        size: 55
      - file: 'fonts/arial.ttf'
        id: font3
        size: 25
    #######################################################
    color:
      - id: red
        red: 100%
        green: 0%
        blue: 0%
        white: 0%
      - id: blue
        red: 0%
        green: 0%
        blue: 100%
        white: 0%
      - id: blue_green
        red: 0%
        green: 90%
        blue: 90%
        white: 0%
      - id: green
        red: 0%
        green: 100%
        blue: 0%
        white: 0%
      - id: violet
        red: 50%
        green: 0%
        blue: 50%
        white: 5%
    ############################################################
    spi:
      clk_pin: GPIO12
      mosi_pin: GPIO11
    ################################################################
    switch:
      - platform: gpio
        pin:
          number: GPIO46
          mode:
            output: True
        name: "${esp_name} I/O"
        id: power_on
      - platform: gpio
        pin:
          number: GPIO15
          mode:
            output: True
        name: "${esp_name} Display"
        id: backlight
    #################################################
    time:
      - platform: homeassistant
        id: esp_time
    ################################################
    display:
      - platform: st7789v
        model: CUSTOM
        eightbitcolor: False
        rotation: 270
        width: 170
        height: 320
        offset_width: 0
        offset_height: 35
        backlight_pin: GPIO15
        cs_pin: GPIO10
        dc_pin: GPIO13
        reset_pin: GPIO9
        id: display1
        update_interval: 0.1s     
        pages:
          - id: page1
            lambda: |-          
              it.strftime(230, 0, id(font3), id(green), "%H:%M", id(esp_time).now());
              it.printf(2, 0, id(font00), id(blue), "HVAC: %s -%s",id(hvac_mode).state.c_str(), id(hvac_txt).state.c_str());
              it.printf(2, 60, id(font2), id(green), TextAlign::BASELINE_LEFT, "%.1f°", id(target).state);
              it.printf(2, 60, id(font0), id(blue_green), "Target");
              it.printf(210, 60, id(font2), id(green), TextAlign::BASELINE_LEFT, "%.1f°", id(avg_temp).state);
              it.printf(205, 60, id(font0), id(blue_green), "Average");
              it.printf(110, 120, id(font2), id(green), TextAlign::BASELINE_LEFT, "%.1f°", id(temp1).state);
              it.print(108, 120, id(font0), id(blue_green), "Sensor");
              it.printf(210, 120, id(font2), id(green), TextAlign::BASELINE_LEFT, "%.1f°", id(encoder).state / 2);
              it.print(213, 120, id(font0), id(blue_green), "Input");
              it.printf(275, 125, id(mdi3), id(violet), "%s", id(wifi_connection) ? "\U000F05A9" : "\U000F05AA");
              it.printf(4, 120, id(font2), id(green), TextAlign::BASELINE_LEFT, "%.1f°", id(thermo_temp).state);
              it.print(5, 120, id(font0), id(blue_green), "Hallway");
              it.printf(80, 140, id(font3), id(green), "Bedroom %.1f", id(temp2).state);
          - id: page2
            lambda: |-
              it.rectangle(0, 0, 320, 170, id(violet));
              it.filled_rectangle(54, 3,id(encoder).state * 2, 29, id(blue));
              it.rectangle(55, 2, 200, 30, id(blue));
              it.print(160, 50, id(font3), id(green), TextAlign::BASELINE_CENTER, "Volume");
              it.print(2, 2, id(mdi2), id(red), "\U000F075E");
              it.print(275, 2, id(mdi2), id(green), "\U000F075D");
              it.printf(160, 100, id(font4), id(green), TextAlign::BASELINE_CENTER, "%.0f", id(encoder).state);
              it.printf(160, 163, id(font0), id(green), TextAlign::BASELINE_CENTER, "%s", id(nowplay).state.c_str());   
              it.printf(275, 125, id(mdi3), id(violet), "%s", id(wifi_connection) ? "\U000F05A9" : "\U000F05AA");    
          - id: page3
            lambda: |-
              it.printf(1, 0, id(font00), id(blue), "HVAC: %s -%s",id(hvac_mode).state.c_str(), id(hvac_txt).state.c_str());
              it.strftime(230, 0, id(font3), id(green), "%H:%M", id(esp_time).now());
              it.filled_rectangle(4, 3, id(encoder).state / 255 * 200, 39, id(violet));
              it.rectangle(3, 2, 201, 40, id(red));
              it.print(160, 120, id(font2), id(green), TextAlign::BASELINE_CENTER, "Bedroom Lights");
              it.printf(160, 85, id(font4), id(green), TextAlign::BASELINE_CENTER, "%.0f%%", id(encoder).state / 255 * 100);
              it.printf(275, 125, id(mdi3), id(violet), "%s", id(wifi_connection) ? "\U000F05A9" : "\U000F05AA");
          - id: page4
            lambda: |-
              it.strftime(230, 0, id(font3), id(green), "%H:%M", id(esp_time).now());
              it.printf(1, 0, id(font00), id(blue), "HVAC: %s -%s",id(hvac_mode).state.c_str(), id(hvac_txt).state.c_str());
              it.printf(45, 30, id(font2), id(green), TextAlign::BASELINE_CENTER, "%.1f°", id(temp3).state);
              it.printf(45, 45, id(font0), TextAlign::BASELINE_CENTER, "Temp");
              it.printf(280, 30, id(font2), id(green), TextAlign::BASELINE_CENTER, "%.1f%%", id(avg_temp).state);
              it.printf(280, 45, id(font0), id(blue_green), "Humidity");
              it.printf(160, 30, id(font2), id(green), TextAlign::BASELINE_CENTER, "%.0f", id(iaq1).state);
              it.print(160, 45, id(font0), id(blue_green), TextAlign::BASELINE_CENTER, "IAQ");
              it.printf(145, 130, id(font2), id(green), TextAlign::BASELINE_CENTER, "Kitchen Lights: %s", id(light2_txt).state.c_str());
              it.printf(285, 125, id(mdi3), id(violet), "%s", id(wifi_connection) ? "\U000F05A9" : "\U000F05AA");
    
    